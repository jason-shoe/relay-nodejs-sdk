/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new delivery or pickup order. */
        post: operations["order-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{orderKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch an order.
         * @description Review order details and hooks. Polling this method is not expected. You should rely on the webhooks to recieve updates.
         */
        get: operations["order-fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Make changes to an active order.
         * @description Some fields of the order may be updated. See /schemas/platform-order-update-request.html
         */
        patch: operations["order-update"];
        trace?: never;
    };
    "/quote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request a new quote */
        post: operations["quote-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quote/{quoteKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch a previously created quote.
         * @description If you created a quote a in the past and you want to check if the quote is still valid then you can attempt to fetch it by the quote key. If the quote is no longer valid then it will not be found. If you are using your quotes right away then there is no need to call this route.
         */
        get: operations["quote-fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat-interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the chatroom interface URL for a specific order
         * @description To chat with RELAY's support team, you can use the chatroom URL provided in the response. The chatroom URL is unique to each order.
         */
        get: operations["chat-interface-fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery-zone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve the delivery zone for any address
         * @description Relay's maximum possible operating zone for a specific address. Orders outside of this range will never be accepted.
         */
        post: operations["fetch-delivery-zone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle the ready status of an order.
         * @description If you have an event for when an order is ready to be picked up then you can use this route to dramatically improve the quality of service your orders receive on the Relay Platform. Be sure to set `requireReadyEvent` to true when creating the order if you intend to use this method.
         */
        post: operations["order-ready"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void/cancel an Order
         * @description Cancel an order when a customer no longer wants an order. Voiding an order should be extremely rare and excessive voiding is treated as abuse.
         */
        post: operations["order-void"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "order-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    order: {
                        externalId: string;
                        /** @description A label that can be used to identify the order. This is shown in place of the externalId to the rider and the consumer. */
                        label?: string;
                        /** @description If you are using the quote service then you must provide the quoteKey here */
                        quoteKey?: string;
                        /** @default false */
                        isCash?: boolean;
                        /** @default false */
                        isPickup?: boolean;
                        /** @default false */
                        isContactFree?: boolean;
                        /**
                         * @description If you will be triggering a call to `order/ready` then set this field to true.
                         * @default false
                         */
                        requireReadyEvent?: boolean;
                        consumer: {
                            name: string;
                            phone: string;
                            location?: {
                                /** Format: not-empty */
                                address1: string;
                                /** Format: not-empty */
                                apartment?: string | null;
                                /** Format: not-empty */
                                city: string;
                                state: string;
                                /** Format: zip-code */
                                zip: string;
                            } | {
                                /** Format: not-empty */
                                text: string;
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            };
                            specialInstructions?: string;
                            /** @description Special instructions that will be shown to the rider when the order is marked as contact free */
                            contactFreeSpecialInstructions?: string;
                            /** @description Control the proof of delivery collected by the rider. It is not recommended that you require more than one POD as it can become bothersome to the consumer. */
                            proof?: {
                                /**
                                 * @description Should the delivery rider collect a photo as proof of delivery
                                 * @default false
                                 */
                                photo?: boolean;
                                /**
                                 * @description Should the delivery rider collect a signature as proof of delivery
                                 * @default false
                                 */
                                signature?: boolean;
                                /**
                                 * @description Should the delivery rider require an ID as proof of alcohol delivery
                                 * @default false
                                 */
                                idScan?: boolean;
                            };
                            /** @enum {string} */
                            preferredContactMethod?: "TEXT" | "CALL";
                        };
                        producer: {
                            name: string;
                            phone: string;
                            location: {
                                /** Format: not-empty */
                                address1: string;
                                /** Format: not-empty */
                                apartment?: string | null;
                                /** Format: not-empty */
                                city: string;
                                state: string;
                                /** Format: zip-code */
                                zip: string;
                            } | {
                                /** Format: not-empty */
                                text: string;
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            };
                            specialInstructions?: string;
                        } | {
                            producerLocationKey: string;
                            specialInstructions?: string;
                        };
                        source?: {
                            /** @description Optional source system of the order. orderSourceKey can be provided by relay. */
                            orderSourceKey?: string;
                        };
                        price: {
                            subTotal: number;
                            tip: number;
                            tax?: number;
                            deliveryFee?: number;
                            /** @description Always treated as negative. Only useful for cash orders or reporting purposes. */
                            discount?: number;
                        };
                        time?: {
                            /** @description If this is a scheduled order. IE, non ASAP. */
                            isFutureOrder?: boolean;
                            /**
                             * Format: date-time
                             * @description The time the consumer placed the order.
                             */
                            placed?: string;
                            /**
                             * Format: date-time
                             * @description The time the consumer considers the order late.
                             */
                            lateDelivery?: string;
                            /**
                             * Format: date-time
                             * @description The time at which the order is estimated to be ready for pickup
                             */
                            expectedReady?: string;
                        };
                        specialInstructions?: string;
                        items?: {
                            name: string;
                            /** Format: int32 */
                            quantity?: number;
                            price?: number;
                            specialInstructions?: string;
                            options?: {
                                name: string;
                                /** Format: int32 */
                                quantity?: number;
                                price?: number;
                            }[];
                        }[];
                        /**
                         * @description Rarely used should be left unused 99% of the time. Enables multiple bicycle couriers. Cost is multipled per rider. For example, 4 riders at a $6 relay fee will actually cost $24. Should not be used without discussing your use case with the Relay team.
                         * @default 1
                         */
                        riderCount?: number;
                        /** @description Include any metadata you would like to associate with the order. */
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description OK - request was successfully evaluated, but the order was not accepted for delivery */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Order not accepted. Provide a valid quoteKey or talk to your sales rep to get all your orders accepted."
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description OK - order created and accepted. <a href="/schemas/platform-order-response.html">Click here</a> for more details on the 201 schema response. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "order": {
                     *         "orderKey": "30ad234f-256a-47fa-af14-55889de64f03",
                     *         "externalId": "YWI-777",
                     *         "producer": {
                     *           "producerLocationKey": "9f18a28d-3290-49e7-9e62-428d2b3eedf7",
                     *           "name": "Larry's Pizza",
                     *           "phone": "2125555555",
                     *           "location": {
                     *             "address1": "47 west 47th Street",
                     *             "city": "New York",
                     *             "state": "NY",
                     *             "zip": "10036",
                     *             "coordinates": {
                     *               "latitude": 40.757683936110126,
                     *               "longitude": -73.98083822680883
                     *             }
                     *           }
                     *         },
                     *         "consumer": {
                     *           "name": "Larry's Pizza",
                     *           "phone": "2125555555",
                     *           "location": {
                     *             "address1": "22 east 19th Street",
                     *             "city": "New York",
                     *             "state": "NY",
                     *             "zip": "",
                     *             "coordinates": {
                     *               "latitude": 40.73637971427497,
                     *               "longitude": -73.98496996108848
                     *             }
                     *           }
                     *         },
                     *         "price": {
                     *           "subTotal": 25,
                     *           "tip": 5.25,
                     *           "relayFee": 9.5
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        order: {
                            orderKey: string;
                            quoteKey?: string;
                            /** @description This is a place to store any additional information about the order that is not covered by the other fields. */
                            metadata?: {
                                [key: string]: unknown;
                            };
                            /** @enum {string} */
                            invoiceTarget?: "ORDER_SOURCE" | "PRODUCER_LOCATION";
                            externalId: string;
                            label?: string;
                            /** @default false */
                            isCash: boolean;
                            /** @default false */
                            isPickup: boolean;
                            requireReadyEvent?: boolean;
                            consumer: {
                                name: string;
                                phone: string;
                                location?: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            producer: {
                                name: string;
                                phone: string;
                                producerKey?: string;
                                producerLocationKey: string;
                                /**
                                 * @description A STATIC location is one that has an active restaurant users and those users can interact with/manage your order. A DYNAMIC restaurant has no users associated with it.
                                 * @enum {string}
                                 */
                                producerLocationType?: "STATIC" | "DYNAMIC";
                                location: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            price: {
                                subTotal: number;
                                tip: number;
                                tax?: number;
                                relayFee: number;
                                deliveryFee?: number;
                                /** @description Always treated as negative. Only useful for cash orders or reporting purposes. */
                                discount?: number;
                            };
                            specialInstructions?: string;
                        };
                    };
                };
            };
            /** @description Invalid request. See validationErrors for more details */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                        validationErrors: {
                            instancePath: string;
                            message: string;
                        }[];
                    };
                };
            };
            /** @description Invalid configuration. Your account is not yet configured to accept orders. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Invalid configuration. Your account is not yet configured to accept orders."
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "order-fetch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. Order returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "order": {
                     *         "externalId": "XJA-243",
                     *         "orderKey": "44ba9482-04e8-41d0-867b-c9a7f6984e6e",
                     *         "consumer": {
                     *           "name": "Larry",
                     *           "phone": "8885555555",
                     *           "specialInstructions": "I'll be in the attic. Call me when you get here.",
                     *           "location": {
                     *             "address1": "245 west 25th Street",
                     *             "city": "New York",
                     *             "state": "New York",
                     *             "zip": "10001"
                     *           }
                     *         },
                     *         "producer": {
                     *           "name": "Sandwich Store",
                     *           "phone": "2125555555",
                     *           "location": {
                     *             "address1": "14 east 15th Street",
                     *             "city": "New York",
                     *             "state": "New York",
                     *             "zip": "10003"
                     *           }
                     *         },
                     *         "price": {
                     *           "subTotal": 33,
                     *           "tax": 2.7,
                     *           "tip": 7.5
                     *         }
                     *       },
                     *       "hooks": [
                     *         {
                     *           "body": {
                     *             "event": "order_placed",
                     *             "timestamp": "2022-09-13T14:37:56.025Z",
                     *             "orderKey": "44ba9482-04e8-41d0-867b-c9a7f6984e6e"
                     *           }
                     *         },
                     *         {
                     *           "body": {
                     *             "timestamp": "2022-09-13T14:43:29.512Z",
                     *             "orderKey": "44ba9482-04e8-41d0-867b-c9a7f6984e6e",
                     *             "externalId": "XJA-243",
                     *             "event": "rider_accepted",
                     *             "producerLocationKey": "10b09c3f-ecfa-4c3b-b5f6-acac002904c3"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        order: {
                            orderKey: string;
                            quoteKey?: string;
                            /** @description This is a place to store any additional information about the order that is not covered by the other fields. */
                            metadata?: {
                                [key: string]: unknown;
                            };
                            /** @enum {string} */
                            invoiceTarget?: "ORDER_SOURCE" | "PRODUCER_LOCATION";
                            externalId: string;
                            label?: string;
                            /** @default false */
                            isCash: boolean;
                            /** @default false */
                            isPickup: boolean;
                            requireReadyEvent?: boolean;
                            consumer: {
                                name: string;
                                phone: string;
                                location?: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            producer: {
                                name: string;
                                phone: string;
                                producerKey?: string;
                                producerLocationKey: string;
                                /**
                                 * @description A STATIC location is one that has an active restaurant users and those users can interact with/manage your order. A DYNAMIC restaurant has no users associated with it.
                                 * @enum {string}
                                 */
                                producerLocationType?: "STATIC" | "DYNAMIC";
                                location: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            price: {
                                subTotal: number;
                                tip: number;
                                tax?: number;
                                relayFee: number;
                                deliveryFee?: number;
                                /** @description Always treated as negative. Only useful for cash orders or reporting purposes. */
                                discount?: number;
                            };
                            specialInstructions?: string;
                        };
                        hooks: {
                            /** @description Schema will match the corresponding webhook event (see https://docs.relay.delivery/schemas/v2-order.html) */
                            body?: Record<string, never>;
                        }[];
                    };
                };
            };
            /** @description Order is not found or no longer avaiable. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "not found"
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "order-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    order: {
                        price?: {
                            subTotal?: number;
                            /** @description Decreases in tips are not supported. */
                            tip?: number;
                            tax?: number;
                            delivery?: number;
                        };
                        specialInstructions?: string;
                        producer?: {
                            /** Format: not-empty */
                            name?: string;
                            phone?: string;
                            specialInstructions?: string;
                            location?: {
                                apartment?: string;
                            };
                        };
                        consumer?: {
                            /** Format: not-empty */
                            name?: string;
                            phone?: string;
                            specialInstructions?: string;
                            location?: {
                                /** Format: not-empty */
                                address1: string;
                                /** Format: not-empty */
                                apartment?: string | null;
                                /** Format: not-empty */
                                city: string;
                                state: string;
                                /** Format: zip-code */
                                zip: string;
                            } | {
                                /** Format: not-empty */
                                text: string;
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            } | {
                                apartment: string;
                            };
                        };
                        time?: {
                            /**
                             * Format: date-time
                             * @description The time at which the order is estimated to be ready for pickup
                             */
                            expectedReady?: string;
                        };
                    };
                    /** @description Let us know why this order needs an update. */
                    reason: string;
                };
            };
        };
        responses: {
            /** @description OK. Order updated succesfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "order": {
                     *         "externalId": "XJA-243",
                     *         "consumer": {
                     *           "name": "Larry",
                     *           "phone": "8885555555",
                     *           "specialInstructions": "I'll be in the attic. Call me when you get here.",
                     *           "location": {
                     *             "address1": "245 west 25th Street",
                     *             "city": "New York",
                     *             "state": "New York",
                     *             "zip": "10001"
                     *           }
                     *         },
                     *         "producer": {
                     *           "name": "Sandwich Store",
                     *           "phone": "2125555555",
                     *           "location": {
                     *             "address1": "14 east 15th Street",
                     *             "city": "New York",
                     *             "state": "New York",
                     *             "zip": "10003"
                     *           }
                     *         },
                     *         "price": {
                     *           "subTotal": 33,
                     *           "tax": 2.7,
                     *           "tip": 7.5
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        order: {
                            orderKey: string;
                            quoteKey?: string;
                            /** @description This is a place to store any additional information about the order that is not covered by the other fields. */
                            metadata?: {
                                [key: string]: unknown;
                            };
                            /** @enum {string} */
                            invoiceTarget?: "ORDER_SOURCE" | "PRODUCER_LOCATION";
                            externalId: string;
                            label?: string;
                            /** @default false */
                            isCash: boolean;
                            /** @default false */
                            isPickup: boolean;
                            requireReadyEvent?: boolean;
                            consumer: {
                                name: string;
                                phone: string;
                                location?: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            producer: {
                                name: string;
                                phone: string;
                                producerKey?: string;
                                producerLocationKey: string;
                                /**
                                 * @description A STATIC location is one that has an active restaurant users and those users can interact with/manage your order. A DYNAMIC restaurant has no users associated with it.
                                 * @enum {string}
                                 */
                                producerLocationType?: "STATIC" | "DYNAMIC";
                                location: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            price: {
                                subTotal: number;
                                tip: number;
                                tax?: number;
                                relayFee: number;
                                deliveryFee?: number;
                                /** @description Always treated as negative. Only useful for cash orders or reporting purposes. */
                                discount?: number;
                            };
                            specialInstructions?: string;
                        };
                    };
                };
            };
            /** @description Invalid request. See validation errors for more info */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "validationErrors": [
                     *         {
                     *           "message": "phone number must be valid"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        message: string;
                        validationErrors: {
                            instancePath: string;
                            message: string;
                        }[];
                    };
                };
            };
            /** @description Order is not found or no longer avaiable for update. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "not found"
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "quote-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    quote: {
                        producer: {
                            location: {
                                /** Format: not-empty */
                                address1: string;
                                /** Format: not-empty */
                                apartment?: string | null;
                                /** Format: not-empty */
                                city: string;
                                state: string;
                                /** Format: zip-code */
                                zip: string;
                            } | {
                                /** Format: not-empty */
                                text: string;
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            } | {
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            };
                            constraints?: {
                                /** Format: date-time */
                                before?: string;
                                /** Format: date-time */
                                after?: string;
                            } | null;
                            name?: string;
                            phone?: string;
                        } | {
                            /** Format: not-empty */
                            producerLocationKey: string;
                            constraints?: {
                                /** Format: date-time */
                                before?: string;
                                /** Format: date-time */
                                after?: string;
                            } | null;
                        };
                        consumer: {
                            location: {
                                /** Format: not-empty */
                                address1: string;
                                /** Format: not-empty */
                                apartment?: string | null;
                                /** Format: not-empty */
                                city: string;
                                state: string;
                                /** Format: zip-code */
                                zip: string;
                            } | {
                                /** Format: not-empty */
                                text: string;
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            } | {
                                coordinates: {
                                    latitude: number;
                                    longitude: number;
                                };
                            };
                            constraints?: {
                                /** Format: date-time */
                                before?: string;
                                /** Format: date-time */
                                after?: string;
                            } | null;
                        };
                        /** @description Include any metadata you like. This will be associated any order created from this quote. */
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description OK - quote request was successfully evaluated, but relay is not offering a quote at this time. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Quote not accepted."
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description OK - quote request was successfully evaluated and a quote has been created and returned */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "quote": {
                     *         "quoteKey": "642039e7-d39c-4be7-a994-e2d818abdfd9",
                     *         "quoteType": "ASAP",
                     *         "relayFee": 9.5,
                     *         "validThrough": "2022-08-03T19:07:58.623Z",
                     *         "estimates": {
                     *           "response": 360,
                     *           "delivery": 720
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        quote: {
                            quoteKey: string;
                            /** @enum {string} */
                            quoteType: "ASAP" | "SCHEDULED_DROPOFF" | "SCHEDULED_PICKUP";
                            relayFee: number;
                            /** Format: date-time */
                            validThrough: string;
                            estimates?: {
                                /** @description The expected seconds between delivery ready and rider arrival at the producer's location. */
                                response?: number;
                                /** @description The expected seconds between delivery pickup and delivery arrival at the consumer's location. */
                                delivery?: number;
                            };
                        };
                    };
                };
            };
            /** @description Invalid request. See validationErrors for more details */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                        validationErrors: {
                            instancePath: string;
                            message: string;
                        }[];
                    };
                };
            };
            /** @description Invalid configuration. Your account is not configured to accept quotes. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "quote-fetch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. Valid quote found. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "quote": {
                     *         "quoteKey": "642039e7-d39c-4be7-a994-e2d818abdfd9",
                     *         "quoteType": "ASAP",
                     *         "relayFee": 9.5,
                     *         "validThrough": "2022-08-03T19:07:58.623Z",
                     *         "estimates": {
                     *           "response": 360,
                     *           "delivery": 720
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        quote: {
                            quoteKey: string;
                            /** @enum {string} */
                            quoteType: "ASAP" | "SCHEDULED_DROPOFF" | "SCHEDULED_PICKUP";
                            relayFee: number;
                            /** Format: date-time */
                            validThrough: string;
                            estimates?: {
                                /** @description The expected seconds between delivery ready and rider arrival at the producer's location. */
                                response?: number;
                                /** @description The expected seconds between delivery pickup and delivery arrival at the consumer's location. */
                                delivery?: number;
                            };
                        };
                    };
                };
            };
            /** @description No valid quote found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "not found"
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "chat-interface-fetch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. Chatroom interface URL returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "url": "https://simple-chat.relay.delivery?token=xja-243"
                     *     } */
                    "application/json": {
                        order: {
                            orderKey: string;
                            quoteKey?: string;
                            /** @description This is a place to store any additional information about the order that is not covered by the other fields. */
                            metadata?: {
                                [key: string]: unknown;
                            };
                            /** @enum {string} */
                            invoiceTarget?: "ORDER_SOURCE" | "PRODUCER_LOCATION";
                            externalId: string;
                            label?: string;
                            /** @default false */
                            isCash: boolean;
                            /** @default false */
                            isPickup: boolean;
                            requireReadyEvent?: boolean;
                            consumer: {
                                name: string;
                                phone: string;
                                location?: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            producer: {
                                name: string;
                                phone: string;
                                producerKey?: string;
                                producerLocationKey: string;
                                /**
                                 * @description A STATIC location is one that has an active restaurant users and those users can interact with/manage your order. A DYNAMIC restaurant has no users associated with it.
                                 * @enum {string}
                                 */
                                producerLocationType?: "STATIC" | "DYNAMIC";
                                location: {
                                    address1: string;
                                    address2?: string;
                                    apartment?: string | null;
                                    city: string;
                                    state: string;
                                    /** Format: zip-code */
                                    zip?: string;
                                    coordinates: {
                                        latitude: number;
                                        longitude: number;
                                    };
                                };
                                specialInstructions?: string;
                            };
                            price: {
                                subTotal: number;
                                tip: number;
                                tax?: number;
                                relayFee: number;
                                deliveryFee?: number;
                                /** @description Always treated as negative. Only useful for cash orders or reporting purposes. */
                                discount?: number;
                            };
                            specialInstructions?: string;
                        };
                        hooks: {
                            /** @description Schema will match the corresponding webhook event (see https://docs.relay.delivery/schemas/v2-order.html) */
                            body?: Record<string, never>;
                        }[];
                    };
                };
            };
            /** @description Chatroom interface is not found or no longer avaiable. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "not found"
                     *     } */
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "fetch-delivery-zone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    address: {
                        /** Format: not-empty */
                        address1: string;
                        /** Format: not-empty */
                        apartment?: string | null;
                        /** Format: not-empty */
                        city: string;
                        state: string;
                        /** Format: zip-code */
                        zip: string;
                    };
                } | {
                    coordinates: {
                        latitude: number;
                        longitude: number;
                    };
                };
            };
        };
        responses: {
            /** @description OK - request was successfully evaluated. A delivery zone is returned if we service the address and no delivery zone is returned if the address is outside of Relay's operating area. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** GeoJSON Polygon */
                        deliveryZone?: {
                            /** @enum {string} */
                            type: "Polygon";
                            coordinates: number[][][];
                        };
                    };
                };
            };
            /** @description Invalid request. See validationErrors for more details */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                        validationErrors: {
                            instancePath: string;
                            message: string;
                        }[];
                    };
                };
            };
        };
    };
    "order-ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The relay generated unique key. */
                    orderKey: string;
                    /** @default true */
                    isReady?: boolean;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The relay generated unique key. */
                        orderKey: string;
                    };
                };
            };
        };
    };
    "order-void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The relay generated unique key. */
                    orderKey: string;
                };
            };
        };
        responses: {
            /** @description OK. Order voided or was already voided. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The order can no longer be voided */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
